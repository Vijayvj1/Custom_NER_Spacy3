actual_x = 10.0 # actual x-coordinate in meters
actual_y = 20.0 # actual y-coordinate in meters
predicted_x = 12.0 # predicted x-coordinate in meters
predicted_y = 19.0 # predicted y-coordinate in meters

# Compute the Euclidean distance between the actual and predicted coordinates
distance = ((actual_x - predicted_x)**2 + (actual_y - predicted_y)**2)**0.5

if distance <= 3:
    print("Prediction is correct!")
else:
    print("Prediction is incorrect. The actual coordinates are ({},{}), while the predicted coordinates are ({},{}).".format(actual_x, actual_y, predicted_x, predicted_y))
    if distance > 3:
        print("The predicted coordinates are too far away from the actual coordinates.")
    else:
        print("The predicted coordinates are too close to the actual coordinates.")


import json
import numpy as np

class TestNpEncoder:
    def test_npencoder_integer(self):
        encoder = NpEncoder()
        assert encoder.default(np.int64(42)) == 42

    def test_npencoder_float(self):
        encoder = NpEncoder()
        assert encoder.default(np.float64(3.14)) == 3.14

    def test_npencoder_ndarray(self):
        encoder = NpEncoder()
        arr = np.array([1, 2, 3])
        assert encoder.default(arr) == arr.tolist()

    def test_json_dump_with_npencoder(self):
        data = {'int': np.int64(42), 'float': np.float64(3.14), 'array': np.array([1, 2, 3])}
        result = json.dumps(data, cls=NpEncoder)
        expected = '{"int": 42, "float": 3.14, "array": [1, 2, 3]}'
        assert result == expected
