import numpy as np
from scipy.optimize import least_squares


rtt_data = np.array([57,60,70,80,85,90])
original_distance_data = np.array([0,5,10,20,30,40])


def range_calibration_model(parameters, rtt):
    c1, c2, c3, c4 = parameters
    drtt = rtt  # Assume RTT is the same as drtt for simplicity
    e = c1 * drtt**3 + c2 * drtt**2 + c3 * drtt + c4
    calibrated_distance = drtt + e
    return calibrated_distance


def residual_function(parameters, rtt, original_distance):
    return range_calibration_model(parameters, rtt) - original_distance

initial_parameters = [0.1, 0.1, 0.1, 0.1]


result = least_squares(residual_function, initial_parameters, args=(rtt_data, original_distance_data))


calibrated_parameters = result.x

print("Calibrated Parameters:", calibrated_parameters)


import numpy as np


calibrated_parameters = calibrated_parameters


def range_calibration_model(parameters, rtt):
    c1, c2, c3, c4 = parameters
    drtt = rtt  # Assume RTT is the same as drtt for simplicity
    e = c1 * drtt**3 + c2 * drtt**2 + c3 * drtt + c4
    calibrated_distance = drtt + e
    return calibrated_distance


def live_calibration(rtt_input):
    calibrated_distance = range_calibration_model(calibrated_parameters, rtt_input)
    return calibrated_distance


input_rtt = 57 
calibrated_distance = live_calibration(input_rtt)
print(f"Calibrated Distance for RTT {input_rtt}: {calibrated_distance}")

