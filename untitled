from flask import Flask, request, jsonify
import jwt
import datetime

app = Flask(__name__)

# Replace 'your_secret_key' with a strong secret key
app.config['SECRET_KEY'] = 'your_secret_key'



# Route for user registration
@app.route('/register', methods=['POST'])
def register():
    # Implement user registration logic here
    # Typically, this would involve storing user information in a database
    # Return a success message upon successful registration
    return jsonify({'message': 'User registered successfully'})

# Route for user login
@app.route('/login', methods=['POST'])
def login():
    # Implement user login logic here
    # Check credentials, generate and return a JWT upon successful login
    # Example code:
    username = request.json.get('username')
    password = request.json.get('password')

    # Check if the username and password are valid
    if username == 'example_user' and password == 'password':
        payload = {
            'username': username,
            'exp': datetime.datetime.utcnow() + datetime.timedelta(days=1)
        }
        token = jwt.encode(payload, app.config['SECRET_KEY'], algorithm='HS256')
        return jsonify({'token': token})
    else:
        return jsonify({'message': 'Invalid credentials'}, 401)

# Protected route (requires authentication)
@app.route('/protected', methods=['GET'])
def protected():
    token = request.headers.get('Authorization')

    if not token:
        return jsonify({'message': 'Token is missing'}, 401)

    try:
        payload = jwt.decode(token, app.config['SECRET_KEY'], algorithms=['HS256'])
        return jsonify({'message': f'Welcome, {payload["username"]}! This is a protected resource.'})
    except jwt.ExpiredSignatureError:
        return jsonify({'message': 'Token has expired'}, 401)
    except jwt.DecodeError:
        return jsonify({'message': 'Invalid token'}, 401)

if __name__ == '__main__':
    app.run(debug=True)
