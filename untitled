@ns.route('/prediction')
@api.response(404, 'Post not found.')
class GetEspPredictionItem(Resource):

    # @api.marshal_with(tag_get)
    @api.response(400, 'Wrong Payload')
    @api.response(500, 'Internal Server Error')
    def get(self):
        """
          Get a tag information.
          URI: /api/tag/informations/?tag_id=200
        """

        try:
            sem_pred = threading.Semaphore()

            sem_pred.acquire()
            mac_id = request.args.get('mac_id')

            if isValidMACAddress(str(mac_id)):

                prediction_result_df, transformed_raw_data, valid_data_id_lis, algo_used, error = esp_prediction_pipeline(
                    mac=str(mac_id))

                if error is None:

                    pred_id = add_esp_pred_data(prediction_result_df)

                    count_prediction = get_count_mac_esp_information_esp(mac_id)

                    if count_prediction > 0:

                        result = get_mac_pred_information_esp(mac_id)
                        result = result.sort_values(by='request_end_time', ascending=False)

                        result_json = result.to_json(orient='records', indent=4)
                        data = json.loads(result_json)
                        # result_json = ast.literal_eval(result_json)
                        data[0]["ViewPort"] = esp_layout_grid

                        pred_map_df = pd.DataFrame()

                        pred_map_df["pred_id"] = [pred_id]
                        # pred_map_df["id"] = [pred_id]
                        pred_map_df["result_json"] = transformed_raw_data.to_json(orient='records')
                        pred_map_df["data_raw_id"] = str(valid_data_id_lis)
                        pred_map_df["algo_used"] = str(algo_used)

                        add_prediction_mapping(pred_map_df)

                        sem_pred.release()
                        return data, 200


                    else:
                        sem_pred.release()
                        return {"code": 1, "message": str("No Predictions Found for the Given MAC!")}


                else:
                    sem_pred.release()
                    return {"code": 1, "message": str("An Error Occurred in Calculation") + str(error)}, 400

            else:
                sem_pred.release()

                return {"code": 1, "message": str("Invalid MAC Format")}, 400

        except Exception as e:

            sem_pred.release()
            print(traceback.format_exc())
            print(sys.exc_info()[2])

            return {"code": 1, "message": str("An Error Occurred in Calculation") + str(e)}, 400
