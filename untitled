from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import padding
import os
from base64 import urlsafe_b64encode

def encrypt(plaintext, key):
    # Pad the plaintext using PKCS7
    padder = padding.PKCS7(128).padder()
    padded_data = padder.update(plaintext) + padder.finalize()

    # Create an AES cipher object in CBC mode
    cipher = Cipher(algorithms.AES(key), modes.CFB(b'\0'*16), backend=default_backend())

    # Encrypt the data
    encryptor = cipher.encryptor()
    ciphertext = encryptor.update(padded_data) + encryptor.finalize()

    # Return the ciphertext
    return ciphertext

def decrypt(ciphertext, key):
    # Create an AES cipher object in CBC mode
    cipher = Cipher(algorithms.AES(key), modes.CFB(b'\0'*16), backend=default_backend())

    # Decrypt the data
    decryptor = cipher.decryptor()
    decrypted_data = decryptor.update(ciphertext) + decryptor.finalize()

    # Unpad the decrypted data using PKCS7
    unpadder = padding.PKCS7(128).unpadder()
    unpadded_data = unpadder.update(decrypted_data) + unpadder.finalize()

    return unpadded_data

# Example usage
key = b'ThisIsASecretKey'
plaintext = b'Hello, AES encryption and decryption without IV!'
ciphertext = encrypt(plaintext, key)

# Print the ciphertext and decrypted plaintext
print("Ciphertext:", urlsafe_b64encode(ciphertext).decode())

decrypted_text = decrypt(ciphertext, key)
print("Decrypted:", decrypted_text.decode())
