import threading

# Create a lock object
lock = threading.Lock()

# Define a global variable to store the last returned ID
last_id = None

# API endpoint for getting the auto-increment ID
def get_auto_increment_id():
    global last_id
    lock.acquire()  # Acquire the lock
    
    try:
        # Perform database operation to get the auto-increment ID
        # Assign the ID to last_id variable
        last_id = # Your code to fetch the ID from the database
        
        return last_id
    finally:
        lock.release()  # Release the lock

# Example usage of the API
def process_request():
    id = get_auto_increment_id()
    print(f"Received ID: {id}")

# Simulate concurrent API requests
def simulate_requests():
    threads = []
    for _ in range(5):
        t = threading.Thread(target=process_request)
        threads.append(t)
        t.start()

    for t in threads:
        t.join()

simulate_requests()
