def distribute_number_weighted(total):
  """
  Distributes a total number into three parts. If equal distribution is not
  possible, the first part receives a higher weight of 50%, while the other two
  parts receive a weight of 25% each.

  Args:
    total: The total number to distribute.

  Returns:
    A list containing the three distributed parts.
  """

  part1 = total // 2
  part2 = (total - part1) // 2
  part3 = total - part1 - part2

  # If equal distribution is not possible, adjust the weights
  if part2 == 0 or part3 == 0:
    part1 = total // 2 + total % 2
    part2 = (total - part1) // 2
    part3 = total - part1 - part2

  return [part1, part2, part3]

# Test cases
total1 = 3
distributed_parts1 = distribute_number_weighted(total1)
print("Total:", total1, "->", distributed_parts1)

total2 = 4
distributed_parts2 = distribute_number_weighted(total2)
print("Total:", total2, "->", distributed_parts2)

# Expected output:
# Total: 3 -> [2, 1, 0]
# Total: 4 -> [2, 1, 1]
