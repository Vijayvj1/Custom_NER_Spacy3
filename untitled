import numpy as np
from scipy.optimize import least_squares

def residuals(x, reference_points, distances):
    return np.linalg.norm(reference_points - x, axis=1) - distances

def trilateration_3d(reference_points, distances):
    if len(reference_points) != 3 or len(reference_points) != len(distances):
        raise ValueError("Exactly three reference points with corresponding distances are required.")
    
    # Convert input data to numpy arrays for easier computations
    reference_points = np.array(reference_points)
    distances = np.array(distances)
    
    # Initial guess for the unknown object's position (can be any point in 3D space)
    initial_guess = np.zeros(3)
    
    # Use least squares to solve for the unknown object's position
    result = least_squares(residuals, initial_guess, args=(reference_points, distances))
    object_position = result.x
    
    return object_position

# Example usage:
if __name__ == "__main__":
    reference_points = np.array([
        [0,0,1],   # [x1, y1, z1]
        [10,0,0],  # [x2, y2, z2]
        [6,3,0],   # [x3, y3, z3]
    ])
    distances = np.array([7,7,7])

    object_position = trilateration_3d(reference_points, distances)
    print("Estimated object position:", object_position)
