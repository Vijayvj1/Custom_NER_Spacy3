Algorithm 1: Range Calibration Model

Input: 
  - parameters = [c1, c2, c3, c4] (Model parameters)
  - rtt (Round-Trip Time measurement)

Procedure RangeCalibrationModel(parameters, rtt):
  drtt ← rtt  # Assume RTT is the same as drtt for simplicity
  e ← c1 * drtt^3 + c2 * drtt^2 + c3 * drtt + c4
  calibrated_distance ← drtt + e
  Return calibrated_distance

End Algorithm 1

Algorithm 2: Nonlinear Least-Squares Fitting

Input: 
  - parameters (Initial guess for model parameters)
  - rtt_data (Array of RTT measurements)
  - original_distance_data (Array of corresponding original distances)

Procedure NonlinearLeastSquaresFitting(parameters, rtt_data, original_distance_data):
  Minimize the sum of squares of residuals:
  result ← LeastSquares(residual_function, parameters, args=(rtt_data, original_distance_data))
  calibrated_parameters ← result.x
  Return calibrated_parameters

End Algorithm 2

Algorithm 3: Residual Function

Input: 
  - parameters (Model parameters)
  - rtt (RTT measurement)
  - original_distance (Corresponding original distance)

Procedure ResidualFunction(parameters, rtt, original_distance):
  calibrated_distance ← RangeCalibrationModel(parameters, rtt)
  residual ← calibrated_distance - original_distance
  Return residual

End Algorithm 3

Algorithm 4: Live Calibration

Input: 
  - calibrated_parameters (Calibrated model parameters)
  - rtt_input (Input RTT value)

Procedure LiveCalibration(calibrated_parameters, rtt_input):
  calibrated_distance ← RangeCalibrationModel(calibrated_parameters, rtt_input)
  Return calibrated_distance

End Algorithm 4

# Example usage:
input_rtt ← 0.2  # Replace with the RTT value to be calibrated
calibrated_distance ← LiveCalibration(calibrated_parameters, input_rtt)
Print "Calibrated Distance for RTT", input_rtt, ":", calibrated_distance
